install.packages(c("devtools", "roxygen2"))
library(devtools)
library(roxygen2)
library(ronsFunctions)
?convColsToCharacter
library(ronsFunctions)
library(ronsFunctions)
library(ronsFunctions)
data(iris)
iris2 <- iris %>%
mutate(
id = paste0(row.names(.), Species)
) %>%
dplyr::select(id, Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
library(magrittr)
iris2 <- iris %>%
mutate(
id = paste0(row.names(.), Species)
) %>%
dplyr::select(id, Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
library(dplyr)
iris2 <- iris %>%
mutate(
id = paste0(row.names(.), Species)
) %>%
dplyr::select(id, Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
library(magrittr)
library(dplyr)
iris2 <- iris %>%
mutate(
id = paste0(row.names(.), Species)
) %>%
dplyr::select(id, Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
iris2 <- iris
iris2$id <- paste0(row.names(iris2), iris2$Species)
iris2 <- iris2[,c(6,1:4)]
library(ronsFunctions)
kMeansClusterize(iris2, iris2, nc = 5)
install.packages("dplyr")
kMeansClusterize(iris2, iris2, nc = 5)
library(dplyr)
kMeansClusterize(iris2, iris2, nc = 5)
View(iris2)
iris3 <- kMeansClusterize(iris2, iris2, nc = 5)
View(iris3)
iris3 <- kMeansClusterize(iris2, iris2, nc = 5, heatMap = T)
install.packages(c("dplyr", "heatmap3", "corrplot"))
library(heatmap3)
library(corrplot)
iris3 <- kMeansClusterize(iris2, iris2, nc = 5, heatMap = T)
iris3 <- kMeansClusterize(iris2, iris2, nc = 5, heatMap = T, corrplot = T)
iris3 <- kMeansClusterize(iris2, iris2, nc = 10, heatMap = T, corrplot = T)
?corrplot
library(ronsFunctions)
iris2 <- iris
iris2$id <- paste0(row.names(iris2), iris2$Species)
iris2 <- iris2[,c(6,1:4)]
iris3 <- kMeansClusterize(iris2, iris2, nc = 10, heatMap = T, corrplot = T)
library(ronsFunctions)
iris3 <- kMeansClusterize(iris2, iris2, nc = 10, heatMap = T, corrplot = T)
library(ronsFunctions)
?sample
library(ronsFunctions)
load_all()
devtools::load_all()
install.packages("devtools")
install.packages("roxygen2")
install.packages(c("dplyr", "ggplot2", "forecast", "rpart", "ggforce", "corrplot", "heatmap3", "readxl", "magrittr"))
detools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
install.packages("lubridate")
devtools::load_all()
library(ronsFunctions)
########### PREP ZAGG DATA ############
rm(list = ls())
setwd("/Volumes/GoogleDrive/My Drive/Customers/Zagg")
pkgs <- c("tidyverse", "lubridate", "magrittr", "readxl", "ronsFunctions", "treemap", "d3treeR", "forecast", "rpart", "rpart.plot", "party", "ggforce", "plotly", "grid", "animation", "caret", "randomForest")
lapply(pkgs, library, character.only = T)
setwd("/Volumes/GoogleDrive/My Drive/Customers/Zagg")
source("/Volumes/GoogleDrive/My Drive/Customers/Zagg/Dashboard/ZaggFunctions.R")
# Read in data----
zagg <- read_xlsx("/Volumes/GoogleDrive/My Drive/Customers/Zagg/Product Detail Sales Report From 01-Jan-2016 To 08-Feb-2018.xlsx")
colnames(zagg) <- gsub("#", "Number", colnames(zagg)) %>% gsub(" ", "_", .)
zagg %<>% dplyr::select(-Channel, -SCD_Response)
zagg2 <- read_xlsx("/Volumes/GoogleDrive/My Drive/Customers/Zagg/Product Detail Sales Report From 01-Feb-2018 To 16-Apr-2018 135527.xlsx")
colnames(zagg2) <- gsub("#", "Number", colnames(zagg2)) %>% gsub(" ", "_", .)
zagg2 %<>% dplyr::select(-Product_SKU)
# zs <- datasetSummary(zagg)
# Wrangle data----
for(i in c("zagg", "zagg2")){
df <- get(i)
df %<>%
dplyr::filter(!is.na(Sold_On)) %>%
mutate(
Category = gsub("^>>", "", Category) # Remove initial >>
, begDay = as.character(Sold_On) %>% substr(1, 10) %>% ymd()
, begMonth = floor_date(begDay, unit = "month")
, begWeek = floor_date(begDay, unit = "week")
, af = "Actual"
, Product_Name = gsub('\\"', 'in', Product_Name)
) %>%
separate(Category, c("cat1", "cat2", "cat3"), ">>", extra = "merge", remove = F) %>%
mutate(
brand = gsub(" .*$", "", Product_Name)
, cat1 = trimws(cat1, "both")
, cat2 = trimws(cat2, "both")
, cat3 = trimws(cat3, "both")
)
assign(i, df)
}
# Combine sales data
zagg2 <- zagg2[which(!zagg2$Invoice_Number %in% zagg$Invoice_Number),] # Remove data from zagg2 that's in zagg
df <- bind_rows(zagg, zagg2)
# Add in inventory data----
zi <- read_xlsx("/Volumes/GoogleDrive/My Drive/Customers/Zagg/Inventory Listing For JCCP, LLC In Inventory Tree On 17-Apr-2018 150121.xlsx")
colnames(zi) <- gsub("#", "Number", colnames(zi)) %>% gsub(" ", "_", .)
# zis <- datasetSummary(zi)
zi %<>% dplyr::rename(Invoiced_At = Location, InvQuantity = Quantity) %>%
dplyr::select(Invoiced_At, Product_Name, InvQuantity) %>%
dplyr::mutate(
InvQuantity = as.numeric(InvQuantity)
, Product_Name = gsub('\\"', 'in', Product_Name)
, rowId = paste(Invoiced_At, Product_Name, sep = "_")
) %>%
dplyr::arrange(rowId, -InvQuantity) %>% # Eliminate duplicates and keep the row that has the highest value
.[!duplicated(.$rowId),] %>%
dplyr::select(-rowId)
# a <- table(zi$rowId) %>% as.data.frame() %>% dplyr::arrange(-Freq)
# Split sales data into most recent and non-most recent data
df %<>%
dplyr::arrange(Invoiced_At, Product_Name, Sold_On, Qty) %>%
group_by(Invoiced_At, Product_Name) %>%
dplyr::mutate(
mostRecent = case_when(
max(Sold_On) == Sold_On & Sold_On == lead(Sold_On) ~ 0
, max(Sold_On) == Sold_On ~ 1
, T ~ 0
)
) %>%
ungroup()
table(df$mostRecent)
dfr <- df %>% dplyr::filter(mostRecent == 1)
dfo <- df %>% dplyr::filter(mostRecent == 0)
# Add most recent inventory number to sales data
dfr %<>% left_join(., zi, by = c("Invoiced_At", "Product_Name"))
dfr$InvQuantity[is.na(dfr$InvQuantity)] <- 0
# Combine the split sales data
df <- bind_rows(dfr, dfo) %>%
dplyr::arrange(Invoiced_At, Product_Name, Sold_On)
# Create hourly forecasts. One for each brand at each location----
lokes <- unique(df$Invoiced_At) %>%
.[which(!. %in% "Headquarters")]
# lokes <- lokes[1:2]
forecastData <- data.frame()
voldy <- 0
setwd("/Volumes/GoogleDrive/My Drive/Customers/Zagg")
########### PREP ZAGG DATA ############
rm(list = ls())
pkgs <- c("tidyverse", "lubridate", "magrittr", "readxl", "ronsFunctions", "treemap", "d3treeR", "forecast", "rpart", "rpart.plot", "party", "ggforce", "plotly", "grid", "animation", "caret", "randomForest")
lapply(pkgs, library, character.only = T)
discreetColors <- data.frame(colorName = c("fireEngineRed", "deepKoamaru", "persianGreen"
, "maximumYellowRed", "graniteGray")
, hex = c("#D12229", "#28335C", "#00A499", "#F3C454"
, "#63666A")
, rgb = c("rgb(209,34,41)", "rgb(40,51,92)", "rgb(0,164,153)"
, "rgb(243,196,84)", "rgb(99,102,106)")
, stringsAsFactors = F
)
install.packages("packrat")
library(ronsFunctions)
colorsToUse("gigg")
colorsToUse("gigg", "Fade")
packrat::set_opts(vcs.ignore.src = TRUE, use.cache = TRUE)
library(ronsFunctions)
